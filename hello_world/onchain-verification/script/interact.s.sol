// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script} from "forge-std/Script.sol";
import {UltraVerifier} from "../src/contract.sol";
import {console} from "forge-std/console.sol";

contract UltraVerifierInteraction is Script {
    function setUp() public {}
    address constant CONTRACT_ADDRESS =
        0x228e29b6a53b234C5879037b50F7c8FFdB89DC74;
    function run() public {
        UltraVerifier verifier = UltraVerifier(CONTRACT_ADDRESS);
        bytes32 verificationKeyHash = verifier.getVerificationKeyHash();
        console.logBytes32(verificationKeyHash);
        bytes
            memory proof = hex"2f682fac60cc8a80a8edbc7b0a37e580e50d1c81c75f368e876db8d1d54af0fa1b880b291217a164611f7f861af83880a03ca29ed6132ca4f1a82a88c1ed5b161d9d800c8a64c5e0ddfc04fb5852fe3694b21fbb3309e2017bcd2b662e5079650af0f0a2e6bcba89d9031765d60f0127d98443bf1b2be6c87d5ebe402df832072a48e2dd86410a645d0ff097d4c2fbb2befbee56261050bc2f7fe5a1c59a61f4211d069cbd5f5e91fa495f24df24256f9fe4c9b62ab15e01097b55ce99813da51ed068af0c82ed6c8e19171436d3e76b6c4930a8616fd5121b476edc343183670be1e99c4788f9c1f6c6db4a83335fa947e5684182c68ddb085fad65e71ac1e816dfbba6753a32980f06906744f0c2f12af5f949887237abccc90bee0ba1095e1848b1c709490d9d2f967316c55d70d3a7766bef3b199490572fcf3c8164f4af15888fab56dfb20c3aa2f302235d12228cd670384e1ec451ec8f5bc7440d5afb1f34bd31ef610f97bb06b7e0d436e7d7744cb097cdd0a8abc96230b80d8c1fb217f215f001faf23334b7823e3e9b1b572ece30bf22485c476ceb5a6df19896f719abda9b7df182bd2038b6966bae4569fc3ea23e1396c4129a839af201e75ca32e5255d763d1b4ce925ea398b7c319ed320ab5c559f46259efe4f3dae652dcb929e555d6d885ca5937ed754da15c679c95357f4df73b6ad14630b96eb7cb57b212c6e73a5f2435d12f2a9a834fbebf1009bdfaa50ac5edf9e4a5970b3f25c096305c304ca949c481cc9904e89289246076727e3c01fcd1180ba0de4db6dcf1c50cc36bd67c32e3615dcb17a7e7b1e15fa18edd0ee6448268fad243deb8df8c1c04cdb87f12ac5aec07346fbe34d86facfbe44d9d08e80e824e6097f2c633971b148277daf87c5d8f529bcea11c85fda1b0595e4c0e6263d68b7f193062c767e72748f3a4f44e2b1fe55b9e7313856c00f11aa508515d375bfbba53796a421ca3070f4c735e2093808af854c32bad0acd28a5fc12b484b961516dc21e395dc5f80dc9b05dcc15c8119726c0368316d2737252a6a84ef7139c61f1aeea6d273f8d105b7ada83b58fbfa90192dc103e5d60814c909f8c50a01194151a37f4d62578077906424b0649bdee2cccdcd3bf07d587f8a3ed4f91fa6b339ac2ed9afba8c32202516d3c4de33932d754304bb7bc7c73755b14d59b5cad4cd4b142c564c2240a955d18134ca7e6e237ead0a0c1f76d842a911812e55889ad7040c69c2a6725239ac4eedd10923554ae4988e13b288933ea3bc7a12197a745af3d79d3bee5780953e3fde806d84f654c093dace053a91ce704121b7415730dfcebd85e92a89d23aeb3db3b4b19f49a03d947a15e04a085f45fe37ca8e4f473b91df606f1fefc1832b239539438a6d69b9397bff9c5f5dd6b234ff6ffbd940a1f4247478aefbf06c2a362186f200b343ac706f7843b3f03205ffe5471b77c7de078496083228e1b18aaa70032fb2ab978e1484cd9a33b638c8feb3892809e12b1e4d6b7e885b509d1720adcef4709856a579a6f5c2f2499e17f59f8688e791b13bfe729531c2a0c5cd1f42fd91f8af2d627bda35a020ae71cd0fc638b5429505f6e515560dd881e0e7cd0056557c9890302ba6bcf2b82ec1c5d792ddaf87c6ae64ab5c5abb39c01e877a09bd2b3afebae8efa2c200344b6ed85da9c8752b854d73fa8c72cb3581d0122479c05aedaa527704278f9a6801a7a15c5d519d3566789247f7f15390d2d3a636f03d4a971b7c34192d4e47777f01081dac277902a767635d2e508a23b1cb86c52ed8c0e7072f417d237016e15bc671daf62b1775ca8269935927d3f8402432d009b5c4ffa42cebdee93aafc1ade122967c3bb567b1ed7e52cfcac925a20ec54a1ef2fcac4c04d882e7a95a23d404e2a48053a4b0dada466d0d94c188922ce2922bb3a05065fc8ed1c912b9499b95f4d53cc856401490af898fee644760d828556da3b600760f188ae5c83df77f4b7f4f68b5e740e17dae7dbc6ceca2a289b2ffdda6e5b321a6a69f6a95d82b3584484e1c3f0f4ac2a8cccb27eb74fdf134f8c31f96fb6331b93058874b5cd91939d2c8482ca04b8f95cbbf5469fd59307b57e7bbb0709dba6500bd44451f15e55d2bd6893f2e363365913c246fdbec109ac3607b24b18a4477e8cee60476967746425673aebe9b4ad4659816858e58b0168e12117e363780e1ea5be248688aed6e50e175d2ae0d5c052a7aaed7be98026ee65caf7f6384623e62e1fa58e2a5ff0d58152ba3da320b9e7eb1529538c9827c6f8f3ec9295a66fa880655a38f4898748aa0c88d356c7ce4a8faf9c26dc73152ba112b869685cc08f1c68a147a1348eaa639e379b1afc22582f449a3de58225a846cde7c469163a87aa31a71743f026e962fc6891eb4759e8d00ba275e3c42764be23c6936e098979757a82aa2a19fd1e771f19e0d528a5d0f4ad7456f68f1173b0bedf6f5d0608ed4a5044dbc8704f9e355d95bac4ebcab927b59f1afa462bd847a208c2b1ed50513942d482202f10be647a4c58ae722708e54760f27c122a887139fcb15fcaaa8e4d7c0fea92adceb2f4b43b6972cf4a3ad95118e1215d0a136456a086352300ecacc3ccf8c72d827023cbb05510244bb79519bacedee902d644073002f08110efb1bcfc832752596d8de45108f46f33dcab610d0a6fce0b23817044361f3d71110c2b2723a3fe123f55c36c13463b58d4b7ec7620a3ca1370bed958694df9d132669951c420a9cb111da2871d98077dccc477df36d7c61bbdfc426c9c7cb63153c1077c649d5583e2e581a227e9d3a2c4d103484d0bc22fb90e2ef1349259b49461e1ffaa01bc6e650006a4a2dc8f56054c253a838f55218e147712bbbf5ea8292ab3694181549fee96a3f9fe5b25c9595554376179421e807e59c8f89225b00ed39a970ccfdd1d4b80093506a19a509926997d531da12333d2a504a54ce7ecb3ba54af2afc5c29348c292adf48a72e6bbe6af60f5ce3";
        bytes32 publicInput = 0x0000000000000000000000000000000000000000000000000000000000000012;
        bytes32[] memory publicInputs = new bytes32[](1);
        publicInputs[0] = publicInput;

        bool result = verifier.verify(proof, publicInputs);
        console.log("Verification result:", result);
    }
}
